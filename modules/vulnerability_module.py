"""
Vulnerability Module: Assesses potential damage to structures
"""

import pandas as pd
import numpy as np

def get_material_factor(material):
    """
    Get vulnerability factor based on building material
    
    Parameters:
    -----------
    material : str
        Building material type
    
    Returns:
    --------
    float
        Material vulnerability factor (0-1 scale, higher = more vulnerable)
    """
    # Material vulnerability factors
    material_factors = {
        'Concrete': 0.5,  # Good resilience
        'Steel': 0.4,     # Best resilience
        'Brick': 0.8,     # High vulnerability
        'Wood': 0.6,      # Medium vulnerability
        'Mixed': 0.7      # Medium-high vulnerability
    }
    
    return material_factors.get(material, 0.7)  # Default to 0.7 if material not found

def get_age_factor(age):
    """
    Get vulnerability factor based on building age
    
    Parameters:
    -----------
    age : int
        Building age in years
    
    Returns:
    --------
    float
        Age vulnerability factor (0-1 scale, higher = more vulnerable)
    """
    try:
        age_value = float(age)
        
        if age_value < 10:
            return 0.5      # Newer buildings with modern codes
        elif age_value < 30:
            return 0.7      # Mid-age buildings
        elif age_value < 50:
            return 0.85     # Older buildings
        else:
            return 1.0      # Very old buildings
    except:
        return 0.7  # Default if conversion fails

def get_density_factor(density):
    """
    Get vulnerability factor based on population density
    
    Parameters:
    -----------
    density : str
        Population density category ('Low', 'Medium', 'High')
    
    Returns:
    --------
    float
        Density factor (0-1 scale, higher = more vulnerable)
    """
    density_factors = {
        'Low': 0.6,
        'Medium': 0.8,
        'High': 1.0
    }
    
    return density_factors.get(density, 0.8)  # Default to 0.8 if density not found

def get_hazard_factor(hazard):
    """
    Get vulnerability factor based on hazard level
    
    Parameters:
    -----------
    hazard : str
        Hazard level category ('Low', 'Moderate', 'High', 'Very High')
    
    Returns:
    --------
    float
        Hazard factor (0-1 scale, higher = more vulnerable)
    """
    hazard_factors = {
        'Low': 0.5,
        'Moderate': 0.8,
        'High': 1.0,
        'Very High': 1.2
    }
    
    return hazard_factors.get(hazard, 0.8)  # Default to 0.8 if hazard not found

def get_building_type_factor(building_type):
    """
    Get vulnerability factor based on building type
    
    Parameters:
    -----------
    building_type : str
        Type of building
    
    Returns:
    --------
    float
        Building type factor (0-1 scale, higher = more vulnerable)
    """
    type_factors = {
        'Residential': 0.9,
        'Commercial': 0.8,
        'High-rise': 0.7,    # Usually built to higher standards
        'School': 1.0,       # Critical infrastructure, high occupancy
        'Hospital': 1.0,     # Critical infrastructure
        'Industrial': 0.85   # Medium-high vulnerability
    }
    
    return type_factors.get(building_type, 0.9)  # Default to 0.9 if type not found

def calculate_vulnerability_score(row):
    """
    Calculate vulnerability score based on building properties and hazard level
    
    Parameters:
    -----------
    row : dict or pandas Series
        A dictionary or Series containing the following keys:
        - Building_Material: Material type
        - Building_Age_Years: Age in years
        - Building_Type: Type of building (optional)
        - Population_Density: Population density category
        - Predicted_Hazard_Level: Hazard level from Hazard Module
    
    Returns:
    --------
    float
        Estimated damage percentage (0-100 scale)
    """
    try:
        # Get factor values
        material_factor = get_material_factor(row.get('Building_Material', 'Mixed'))
        age_factor = get_age_factor(row.get('Building_Age_Years', 30))
        density_factor = get_density_factor(row.get('Population_Density', 'Medium'))
        hazard_factor = get_hazard_factor(row.get('Predicted_Hazard_Level', 'Moderate'))
        
        # Include building type if available
        type_factor = get_building_type_factor(row.get('Building_Type', 'Residential'))
        
        # Calculate damage percentage
        damage_percent = material_factor * age_factor * density_factor * hazard_factor * type_factor * 100
        
        # Ensure result is between 0-100
        damage_percent = min(100, max(0, damage_percent))
        
        return round(damage_percent, 1)
    
    except Exception as e:
        # Return a default value if calculation fails
        print(f"Vulnerability calculation error: {e}")
        return 50.0  # Default to medium damage

def categorize_damage_level(damage_percent):
    """
    Categorize damage percentage into qualitative damage level
    
    Parameters:
    -----------
    damage_percent : float
        Estimated damage percentage (0-100)
    
    Returns:
    --------
    str
        Qualitative damage level ('Low', 'Moderate', 'High')
    """
    try:
        damage = float(damage_percent)
        
        if damage < 25:
            return "Low"
        elif damage < 60:
            return "Moderate"
        else:
            return "High"
    except:
        return "Moderate"  # Default if conversion fails